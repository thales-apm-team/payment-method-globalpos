import org.apache.tools.ant.filters.EscapeUnicode
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id "com.github.johnrengelman.shadow" version "5.1.0"
    id "org.sonarqube" version "2.8"
    id "org.owasp.dependencycheck" version "5.2.2"
}

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'java-library'
apply plugin: 'jacoco'


def externalFileName = "$projectDir/.external"
if (file(externalFileName).exists()) {
    apply from: "external.gradle"
} else {
    apply from: "monext.gradle"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.encoding = 'UTF-8'

configurations {
    fatJarTest
}

dependencies {
    testRuntimeOnly group: 'commons-lang', name: 'commons-lang', version: '2.6'

    implementation group: 'com.payline', name: 'payment-method-api', version: paymentMethodApiVersion
    implementation group: 'com.google.code.gson', name: 'gson', version: gsonVersion
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: fasterXMLVersion

    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jsVersion
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4jsVersion
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: httpComponentVersion

    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: jupiterVersion
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: jupiterVersion

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

//    implementation name: 'com.libs/library-1.0.0.0.jar'
//    compile files('library-1.0.0.0.jar')
//    implementation group: 'com.library', name: 'library', version: '1.0.0.0'
    implementation group: 'com.plugin', name: 'toolbox', version: '1.0.0'
}

dependencyCheck {
    format 'ALL'
}

assemble.dependsOn shadowJar

shadowJar {
    classifier = ''
    dependencies {
        exclude(dependency('com.payline:payment-method-api'))
        exclude(dependency("org.apache.logging.log4j:log4j-api:$log4jsVersion"))
        exclude(dependency("org.apache.logging.log4j:log4j-core:$log4jsVersion"))
        exclude(dependency("org.junit.jupiter:junit-jupiter-params:$jupiterVersion"))
        exclude(dependency("org.junit.jupiter:junit-jupiter-api:$jupiterVersion"))
    }
}

//repositories {
//    flatDir {
//        dirs 'libs'
//        dirs '~/Documents/Monext/workspace/library/build/libs'
//    }
//}

jar {
    manifest {
        attributes(
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Build-Date': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Source-Compatibility': project.sourceCompatibility,
                'Target-Compatibility': project.targetCompatibility
        )
    }
}


task printVersion {
    doLast {
        println version
    }
}

/* Replace tokens in resources files after compilation */
processResources {
    filesMatching('messages_fr.properties') {
        filter(EscapeUnicode)
    }
    filesMatching('release.properties') {
        filter(ReplaceTokens, tokens: [
                'version': project.version.replaceFirst("-.*", ""),
                'date'   : new Date().format("dd/MM/yyyy")
        ])
    }
}

// To create a JAR including test classes and dependencies
task testJar(type: com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar) {
    dependsOn 'shadowJar', 'testClasses'
    classifier = 'tests'
    from sourceSets.test.output.classesDirs + shadowJar
    configurations = [project.configurations.fatJarTest]
}

test {
    useJUnitPlatform()
    exclude('**/*IT.class')
}